{"ast":null,"code":"var _jsxFileName = \"/Users/anastasiyauraleva/Desktop/MyMLHJourney/my-fellowship/src/cards/card4.js\",\n    _s = $RefreshSig$();\n\nimport react from \"react\";\nimport { useLazyQuery, useQuery } from \"@apollo/react-hooks\";\nimport { GET_ALL_USER_INFO } from \"../data/GraphQL\";\nimport { useUser } from \"../context/userContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FourthCard() {\n  _s();\n\n  const user = useUser(); //gets!! the value of set user\n  //think of hooks like a cloud , and when u useUser u get the info from the cloud\n\n  console.log(user); //put a new var for loading etc so that it dosent clash\n\n  const {\n    loading: userLoading,\n    error: userError,\n    data: userData\n  } = useQuery(GET_ALL_USER_INFO, {\n    variables: {\n      username: user.userName\n    }\n  }); //this is where you can specify which eact query u want\n\n  if (userLoading) return \"Loading...\";\n  if (userError) return `Error! ${userError.message}`;\n  console.log(userData);\n  let obj = userData.user; //here is JSX -> it has HTML which u want to display to the page\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"This is 4th card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [obj.name, \" by \", obj.location]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, obj.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FourthCard, \"faol7qJrm4PSh74Se7dM7kdH+iM=\", false, function () {\n  return [useUser, useQuery];\n});\n\n_c = FourthCard;\nexport default FourthCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"FourthCard\");","map":{"version":3,"sources":["/Users/anastasiyauraleva/Desktop/MyMLHJourney/my-fellowship/src/cards/card4.js"],"names":["react","useLazyQuery","useQuery","GET_ALL_USER_INFO","useUser","FourthCard","user","console","log","loading","userLoading","error","userError","data","userData","variables","username","userName","message","obj","name","location","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,qBAAvC;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,OAAT,QAAwB,wBAAxB;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAMC,IAAI,GAAGF,OAAO,EAApB,CADoB,CACI;AACxB;;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAHoB,CAIpB;;AACA,QAAM;AACJG,IAAAA,OAAO,EAAEC,WADL;AAEJC,IAAAA,KAAK,EAAEC,SAFH;AAGJC,IAAAA,IAAI,EAAEC;AAHF,MAIFZ,QAAQ,CAACC,iBAAD,EAAoB;AAAEY,IAAAA,SAAS,EAAE;AAAEC,MAAAA,QAAQ,EAAEV,IAAI,CAACW;AAAjB;AAAb,GAApB,CAJZ,CALoB,CASyD;;AAE7E,MAAIP,WAAJ,EAAiB,OAAO,YAAP;AACjB,MAAIE,SAAJ,EAAe,OAAQ,UAASA,SAAS,CAACM,OAAQ,EAAnC;AAEfX,EAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ;AAEA,MAAIK,GAAG,GAAGL,QAAQ,CAACR,IAAnB,CAhBoB,CAkBpB;;AACA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAA,iBACGa,GAAG,CAACC,IADP,UACiBD,GAAG,CAACE,QADrB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,KAAUF,GAAG,CAACG,EAAd;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA5BQjB,U;UACMD,O,EAQTF,Q;;;KATGG,U;AA8BT,eAAeA,UAAf","sourcesContent":["import react from \"react\";\nimport { useLazyQuery, useQuery } from \"@apollo/react-hooks\";\nimport { GET_ALL_USER_INFO } from \"../data/GraphQL\";\nimport { useUser } from \"../context/userContext\";\n\nfunction FourthCard() {\n  const user = useUser(); //gets!! the value of set user\n  //think of hooks like a cloud , and when u useUser u get the info from the cloud\n  console.log(user);\n  //put a new var for loading etc so that it dosent clash\n  const {\n    loading: userLoading,\n    error: userError,\n    data: userData,\n  } = useQuery(GET_ALL_USER_INFO, { variables: { username: user.userName } }); //this is where you can specify which eact query u want\n\n  if (userLoading) return \"Loading...\";\n  if (userError) return `Error! ${userError.message}`;\n\n  console.log(userData);\n\n  let obj = userData.user;\n\n  //here is JSX -> it has HTML which u want to display to the page\n  return (\n    <div key={obj.id}>\n      <h1>This is 4th card</h1>\n\n      <p>\n        {obj.name} by {obj.location}\n      </p>\n    </div>\n  );\n}\n\nexport default FourthCard;\n"]},"metadata":{},"sourceType":"module"}