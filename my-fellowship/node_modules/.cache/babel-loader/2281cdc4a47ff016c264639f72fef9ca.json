{"ast":null,"code":"var _jsxFileName = \"/Users/anastasiyauraleva/Desktop/MyMLHJourney/my-fellowship/src/GithubAuthUI.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport socialMediaAuth from \"./service/auth\";\nimport UserInfo from \"./data/GraphQL\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { useSetUser, useUser } from \"./context/userContext\";\nimport { ApolloProvider, ApolloClient, gql, InMemoryCache, useQuery, createHttpLink } from \"@apollo/client\";\nimport firebase from \"./configs/firebase-config\";\nimport { useHistory } from \"react-router-dom\";\nimport { ParentCard } from \"./cards/parentCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst githubProvider = new firebase.auth.GithubAuthProvider();\n\nfunction GithubAuthUI() {\n  _s();\n\n  const history = useHistory();\n  const user = useUser();\n  const setUser = useSetUser();\n  const httpLink = createHttpLink({\n    uri: \"https://api.github.com/graphql\"\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    // react hooks plz learn this\n    return {\n      headers: { ...headers,\n        authorization: user.userToken ? `Bearer ${user.userToken}` : \"\"\n      }\n    };\n  });\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n\n  const handleOnClick = async provider => {\n    const res = await socialMediaAuth(provider);\n    console.log(res);\n    setUser(() => res);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: user.userToken ? /*#__PURE__*/_jsxDEV(ParentCard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"github-background\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Github Authentication\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleOnClick(githubProvider),\n        children: [\" \", \"Sign in with Github\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GithubAuthUI, \"rhYvsprI8nBCjp9oS4ubCTrLazw=\", false, function () {\n  return [useHistory, useUser, useSetUser];\n});\n\n_c = GithubAuthUI;\nexport default GithubAuthUI;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubAuthUI\");","map":{"version":3,"sources":["/Users/anastasiyauraleva/Desktop/MyMLHJourney/my-fellowship/src/GithubAuthUI.js"],"names":["React","socialMediaAuth","UserInfo","setContext","useSetUser","useUser","ApolloProvider","ApolloClient","gql","InMemoryCache","useQuery","createHttpLink","firebase","useHistory","ParentCard","githubProvider","auth","GithubAuthProvider","GithubAuthUI","history","user","setUser","httpLink","uri","authLink","_","headers","authorization","userToken","client","link","concat","cache","handleOnClick","provider","res","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,uBAApC;AACA,SACEC,cADF,EAEEC,YAFF,EAGEC,GAHF,EAIEC,aAJF,EAKEC,QALF,EAMEC,cANF,QAOO,gBAPP;AAQA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,oBAA3B;;AAEA,MAAMC,cAAc,GAAG,IAAIH,QAAQ,CAACI,IAAT,CAAcC,kBAAlB,EAAvB;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACtB,QAAMC,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAMO,IAAI,GAAGf,OAAO,EAApB;AACA,QAAMgB,OAAO,GAAGjB,UAAU,EAA1B;AAEA,QAAMkB,QAAQ,GAAGX,cAAc,CAAC;AAC9BY,IAAAA,GAAG,EAAE;AADyB,GAAD,CAA/B;AAIA,QAAMC,QAAQ,GAAGrB,UAAU,CAAC,CAACsB,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoB;AAC9C;AACA;AACA;AACA,WAAO;AACLA,MAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPC,QAAAA,aAAa,EAAEP,IAAI,CAACQ,SAAL,GAAkB,UAASR,IAAI,CAACQ,SAAU,EAA1C,GAA8C;AAFtD;AADJ,KAAP;AAMD,GAV0B,CAA3B;AAYA,QAAMC,MAAM,GAAG,IAAItB,YAAJ,CAAiB;AAC9BuB,IAAAA,IAAI,EAAEN,QAAQ,CAACO,MAAT,CAAgBT,QAAhB,CADwB;AAE9BU,IAAAA,KAAK,EAAE,IAAIvB,aAAJ;AAFuB,GAAjB,CAAf;;AAKA,QAAMwB,aAAa,GAAG,MAAOC,QAAP,IAAoB;AACxC,UAAMC,GAAG,GAAG,MAAMlC,eAAe,CAACiC,QAAD,CAAjC;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAd,IAAAA,OAAO,CAAC,MAAMc,GAAP,CAAP;AACD,GAJD;;AAKA,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEN,MAAxB;AAAA,cACGT,IAAI,CAACQ,SAAL,gBACC,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAMK,aAAa,CAAClB,cAAD,CAApC;AAAA,mBACG,GADH;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA9CQG,Y;UACSL,U,EACHR,O,EACGD,U;;;KAHTc,Y;AAgDT,eAAeA,YAAf","sourcesContent":["import React from \"react\";\nimport socialMediaAuth from \"./service/auth\";\nimport UserInfo from \"./data/GraphQL\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { useSetUser, useUser } from \"./context/userContext\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  gql,\n  InMemoryCache,\n  useQuery,\n  createHttpLink,\n} from \"@apollo/client\";\nimport firebase from \"./configs/firebase-config\";\nimport { useHistory } from \"react-router-dom\";\nimport { ParentCard } from \"./cards/parentCard\";\n\nconst githubProvider = new firebase.auth.GithubAuthProvider();\n\nfunction GithubAuthUI() {\n  const history = useHistory();\n  const user = useUser();\n  const setUser = useSetUser();\n\n  const httpLink = createHttpLink({\n    uri: \"https://api.github.com/graphql\",\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    // react hooks plz learn this\n    return {\n      headers: {\n        ...headers,\n        authorization: user.userToken ? `Bearer ${user.userToken}` : \"\",\n      },\n    };\n  });\n\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n  });\n\n  const handleOnClick = async (provider) => {\n    const res = await socialMediaAuth(provider);\n    console.log(res);\n    setUser(() => res);\n  };\n  return (\n    <ApolloProvider client={client}>\n      {user.userToken ? (\n        <ParentCard />\n      ) : (\n        <div className=\"github-background\">\n          <h1>Github Authentication</h1>\n          <button onClick={() => handleOnClick(githubProvider)}>\n            {\" \"}\n            Sign in with Github\n          </button>\n        </div>\n      )}\n    </ApolloProvider>\n  );\n}\n\nexport default GithubAuthUI;\n"]},"metadata":{},"sourceType":"module"}