{"ast":null,"code":"var _jsxFileName = \"/Users/anastasiyauraleva/Desktop/MyMLHJourney/my-fellowship/src/GithubAuthUI.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport socialMediaAuth from \"./service/auth\";\nimport UserInfo from \"./data/GraphQL\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { useSetUser, useUser } from \"./context/userContext\";\nimport { ApolloProvider, ApolloClient, gql, InMemoryCache, useQuery, createHttpLink } from \"@apollo/client\";\nimport firebase from \"./configs/firebase-config\";\nimport { useHistory } from \"react-router-dom\";\nimport { ParentCard } from \"./cards/parentCard\";\nimport BackgroundLogin from \"./cards/images/login-background.gif\";\nimport \"./GithubAuthUI.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst githubProvider = new firebase.auth.GithubAuthProvider();\n\nfunction GithubAuthUI() {\n  _s();\n\n  const history = useHistory();\n  const user = useUser();\n  const setUser = useSetUser();\n  const httpLink = createHttpLink({\n    uri: \"https://api.github.com/graphql\"\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    // react hooks plz learn this\n    return {\n      headers: { ...headers,\n        authorization: user.userToken ? `Bearer ${user.userToken}` : \"\"\n      }\n    };\n  });\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n\n  const handleOnClick = async provider => {\n    const res = await socialMediaAuth(provider);\n    console.log(res);\n    setUser(() => res);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: user.userToken ? /*#__PURE__*/_jsxDEV(ParentCard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"github-auth\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"auth-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"main-title\",\n          children: \"Github Authentication\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleOnClick(githubProvider),\n          children: [\" \", \"Sign in with Github\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"github-background\",\n        src: BackgroundLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GithubAuthUI, \"rhYvsprI8nBCjp9oS4ubCTrLazw=\", false, function () {\n  return [useHistory, useUser, useSetUser];\n});\n\n_c = GithubAuthUI;\nexport default GithubAuthUI;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubAuthUI\");","map":{"version":3,"sources":["/Users/anastasiyauraleva/Desktop/MyMLHJourney/my-fellowship/src/GithubAuthUI.js"],"names":["React","socialMediaAuth","UserInfo","setContext","useSetUser","useUser","ApolloProvider","ApolloClient","gql","InMemoryCache","useQuery","createHttpLink","firebase","useHistory","ParentCard","BackgroundLogin","githubProvider","auth","GithubAuthProvider","GithubAuthUI","history","user","setUser","httpLink","uri","authLink","_","headers","authorization","userToken","client","link","concat","cache","handleOnClick","provider","res","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,uBAApC;AACA,SACEC,cADF,EAEEC,YAFF,EAGEC,GAHF,EAIEC,aAJF,EAKEC,QALF,EAMEC,cANF,QAOO,gBAPP;AAQA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,eAAP,MAA4B,qCAA5B;AACA,OAAO,oBAAP;;AAEA,MAAMC,cAAc,GAAG,IAAIJ,QAAQ,CAACK,IAAT,CAAcC,kBAAlB,EAAvB;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACtB,QAAMC,OAAO,GAAGP,UAAU,EAA1B;AACA,QAAMQ,IAAI,GAAGhB,OAAO,EAApB;AACA,QAAMiB,OAAO,GAAGlB,UAAU,EAA1B;AAEA,QAAMmB,QAAQ,GAAGZ,cAAc,CAAC;AAC9Ba,IAAAA,GAAG,EAAE;AADyB,GAAD,CAA/B;AAIA,QAAMC,QAAQ,GAAGtB,UAAU,CAAC,CAACuB,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoB;AAC9C;AACA;AACA;AACA,WAAO;AACLA,MAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPC,QAAAA,aAAa,EAAEP,IAAI,CAACQ,SAAL,GAAkB,UAASR,IAAI,CAACQ,SAAU,EAA1C,GAA8C;AAFtD;AADJ,KAAP;AAMD,GAV0B,CAA3B;AAYA,QAAMC,MAAM,GAAG,IAAIvB,YAAJ,CAAiB;AAC9BwB,IAAAA,IAAI,EAAEN,QAAQ,CAACO,MAAT,CAAgBT,QAAhB,CADwB;AAE9BU,IAAAA,KAAK,EAAE,IAAIxB,aAAJ;AAFuB,GAAjB,CAAf;;AAKA,QAAMyB,aAAa,GAAG,MAAOC,QAAP,IAAoB;AACxC,UAAMC,GAAG,GAAG,MAAMnC,eAAe,CAACkC,QAAD,CAAjC;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAd,IAAAA,OAAO,CAAC,MAAMc,GAAP,CAAP;AACD,GAJD;;AAKA,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEN,MAAxB;AAAA,cACGT,IAAI,CAACQ,SAAL,gBACC,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE;AAAS,QAAA,SAAS,EAAC,cAAnB;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAE,MAAMK,aAAa,CAAClB,cAAD,CAApC;AAAA,qBACG,GADH;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAmC,QAAA,GAAG,EAAED;AAAxC;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GAlDQI,Y;UACSN,U,EACHR,O,EACGD,U;;;KAHTe,Y;AAoDT,eAAeA,YAAf","sourcesContent":["import React from \"react\";\nimport socialMediaAuth from \"./service/auth\";\nimport UserInfo from \"./data/GraphQL\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { useSetUser, useUser } from \"./context/userContext\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  gql,\n  InMemoryCache,\n  useQuery,\n  createHttpLink,\n} from \"@apollo/client\";\nimport firebase from \"./configs/firebase-config\";\nimport { useHistory } from \"react-router-dom\";\nimport { ParentCard } from \"./cards/parentCard\";\nimport BackgroundLogin from \"./cards/images/login-background.gif\";\nimport \"./GithubAuthUI.css\";\n\nconst githubProvider = new firebase.auth.GithubAuthProvider();\n\nfunction GithubAuthUI() {\n  const history = useHistory();\n  const user = useUser();\n  const setUser = useSetUser();\n\n  const httpLink = createHttpLink({\n    uri: \"https://api.github.com/graphql\",\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    // react hooks plz learn this\n    return {\n      headers: {\n        ...headers,\n        authorization: user.userToken ? `Bearer ${user.userToken}` : \"\",\n      },\n    };\n  });\n\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n  });\n\n  const handleOnClick = async (provider) => {\n    const res = await socialMediaAuth(provider);\n    console.log(res);\n    setUser(() => res);\n  };\n  return (\n    <ApolloProvider client={client}>\n      {user.userToken ? (\n        <ParentCard />\n      ) : (\n        <div className=\"github-auth\">\n          <section className=\"auth-section\">\n            <h1 className=\"main-title\">Github Authentication</h1>\n            <button onClick={() => handleOnClick(githubProvider)}>\n              {\" \"}\n              Sign in with Github\n            </button>\n          </section>\n\n          <img className=\"github-background\" src={BackgroundLogin} />\n        </div>\n      )}\n    </ApolloProvider>\n  );\n}\n\nexport default GithubAuthUI;\n"]},"metadata":{},"sourceType":"module"}